# Development Docker Compose Configuration
# Can use pre-built images from Docker Hub or build locally

services:
  # Python后端服务
  backend:
    # For faster development, use pre-built image
    # Uncomment the image line and comment the build lines to use remote image
    image: adguardquery/adguard-dns-query:backend-latest
    # build: 
    #   context: ./backend-python
    #   dockerfile: Dockerfile
    container_name: adguard-backend-dev
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - backend_logs:/app/logs
      # For local development with remote image, mount source code
      # - ./backend-python:/app:ro
    networks:
      - adguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/rules/statistics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # 前端服务
  frontend:
    # For faster development, use pre-built image
    # Uncomment the image line and comment the build lines to use remote image
    image: adguardquery/adguard-dns-query:frontend-latest
    # build:
    #   context: ./frontend
    #   dockerfile: Dockerfile
    container_name: adguard-frontend-dev
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      # For local development with remote image, mount source code
      # - ./frontend:/usr/share/nginx/html:ro
    networks:
      - adguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

volumes:
  backend_logs:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${PWD}/logs

networks:
  adguard-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: adguard-br