name: Docker Build and Push

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: docker.io
  IMAGE_NAME: adguard-dns-query

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate tags for backend
        id: backend-tags
        run: |
          DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
          IMAGE_BASE="${{ env.REGISTRY }}/${DOCKER_USERNAME}/${{ env.IMAGE_NAME }}"
          
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "tags=${IMAGE_BASE}:backend-latest,${IMAGE_BASE}:main-backend" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_name }}" != "main" ]; then
            echo "tags=${IMAGE_BASE}:${{ github.ref_name }}-backend" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "tags=${IMAGE_BASE}:pr-${{ github.event.number }}-backend" >> $GITHUB_OUTPUT
          else
            echo "tags=${IMAGE_BASE}:backend-latest" >> $GITHUB_OUTPUT
          fi

      - name: Generate tags for frontend
        id: frontend-tags
        run: |
          DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
          IMAGE_BASE="${{ env.REGISTRY }}/${DOCKER_USERNAME}/${{ env.IMAGE_NAME }}"
          
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "tags=${IMAGE_BASE}:frontend-latest,${IMAGE_BASE}:main-frontend" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_name }}" != "main" ]; then
            echo "tags=${IMAGE_BASE}:${{ github.ref_name }}-frontend" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "tags=${IMAGE_BASE}:pr-${{ github.event.number }}-frontend" >> $GITHUB_OUTPUT
          else
            echo "tags=${IMAGE_BASE}:frontend-latest" >> $GITHUB_OUTPUT
          fi

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend-python
          file: ./backend-python/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.backend-tags.outputs.tags }}
          labels: |
            org.opencontainers.image.title=AdGuard DNS Query Backend
            org.opencontainers.image.description=FastAPI backend for AdGuard DNS query service
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.frontend-tags.outputs.tags }}
          labels: |
            org.opencontainers.image.title=AdGuard DNS Query Frontend
            org.opencontainers.image.description=Nginx frontend for AdGuard DNS query service
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate docker-compose with pushed images
        if: github.event_name != 'pull_request'
        run: |
          cat > docker-compose.prod.yml << EOF
          services:
            backend:
              image: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:backend-latest
              container_name: adguard-backend
              restart: unless-stopped
              ports:
                - "8080:8080"
              environment:
                - PYTHONPATH=/app
                - LOG_LEVEL=INFO
              volumes:
                - backend_logs:/app/logs
              networks:
                - adguard-network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/api/rules/statistics"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s

            frontend:
              image: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:frontend-latest
              container_name: adguard-frontend
              restart: unless-stopped
              ports:
                - "3000:80"
              depends_on:
                backend:
                  condition: service_healthy
              networks:
                - adguard-network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost/"]
                interval: 30s
                timeout: 10s
                retries: 3

          volumes:
            backend_logs:
              driver: local

          networks:
            adguard-network:
              driver: bridge
          EOF

      - name: Upload production docker-compose
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-production
          path: docker-compose.prod.yml

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Set image variables
        id: images
        run: |
          echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:backend-latest" >> $GITHUB_OUTPUT
          echo "FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:frontend-latest" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.images.outputs.BACKEND_IMAGE }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.images.outputs.FRONTEND_IMAGE }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: '.'